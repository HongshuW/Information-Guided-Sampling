You are an expert in program synthesis. You are tasked with solving a Syntax-Guided Synthesis (SyGuS) problem. Your goal is to output a function that should produce outputs that satisfy a series of constraints when given specific inputs.

Question:
(set-logic SLIA)

(synth-fun f ((name String)) String
    ((Start String) (ntString String) (ntInt Int) (ntBool Bool))
    ((Start String (ntString))
    (ntString String (name " " (str.++ ntString ntString) (str.replace ntString ntString ntString) (str.at ntString ntInt) (str.from_int ntInt) (str.substr ntString ntInt ntInt)))
    (ntInt Int (0 1 2 3 4 5 (+ ntInt ntInt) (- ntInt ntInt) (str.len ntString) (str.to_int ntString) (str.indexof ntString ntString ntInt)))
    (ntBool Bool (true false (str.prefixof ntString ntString) (str.suffixof ntString ntString) (str.contains ntString ntString)))))

(declare-var name String)
(constraint (= (f "Ducati100") "Ducati"))
(constraint (= (f "Ducati100") "Ducati"))
(constraint (= (f "Ducati100") "Ducati"))
(constraint (= (f "Honda125") "Honda"))
(constraint (= (f "Honda125") "Honda"))
(constraint (= (f "Honda125") "Honda"))
(constraint (= (f "Ducati250") "Ducati"))
(constraint (= (f "Ducati250") "Ducati"))
(constraint (= (f "Ducati250") "Ducati"))
(constraint (= (f "Honda250") "Honda"))
(constraint (= (f "Honda250") "Honda"))
(constraint (= (f "Honda250") "Honda"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Acura100") "Acura"))
(constraint (= (f "Acura100") "Acura"))
(constraint (= (f "Acura100") "Acura"))
(constraint (= (f "Acura125") "Acura"))
(constraint (= (f "Ferrari250") "Ferrari"))
(constraint (= (f "Ferrari250") "Ferrari"))
(constraint (= (f "Ferrari250") "Ferrari"))
(constraint (= (f "Ferrari250") "Ferrari"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati100") "Ducati"))
(constraint (= (f "Honda125") "Honda"))
(constraint (= (f "Honda125") "Honda"))
(constraint (= (f "Honda125") "Honda"))
(constraint (= (f "Ducati250") "Ducati"))
(constraint (= (f "Honda250") "Honda"))
(constraint (= (f "Honda250") "Honda"))
(constraint (= (f "Honda250") "Honda"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Acura100") "Acura"))
(constraint (= (f "Acura125") "Acura"))
(constraint (= (f "Acura125") "Acura"))
(constraint (= (f "Acura125") "Acura"))
(constraint (= (f "Ferrari250") "Ferrari"))
(constraint (= (f "Ferrari250") "Ferrari"))
(constraint (= (f "Ferrari250") "Ferrari"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Honda550") "Honda"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati125") "Ducati"))
(constraint (= (f "Ducati125") "Ducati"))

(check-synth)
Solution:
(define-fun f ((name String)) String (str.substr name 0 (- (str.len name) 3)))

Question:
(set-logic SLIA)

(synth-fun f ((col1 String) (col2 String)) String
    ((Start String) (ntString String) (ntInt Int) (ntBool Bool))
    ((Start String (ntString))
    (ntString String (col1 col2 " " "," "USA" "PA" "CT" "CA" "MD" "NY" (str.++ ntString ntString) (str.replace ntString ntString ntString) (str.at ntString ntInt) (str.from_int ntInt) (ite ntBool ntString ntString) (str.substr ntString ntInt ntInt)))
    (ntInt Int (0 1 2 (+ ntInt ntInt) (- ntInt ntInt) (str.len ntString) (str.to_int ntString) (str.indexof ntString ntString ntInt)))
    (ntBool Bool (true false (str.prefixof ntString ntString) (str.suffixof ntString ntString) (str.contains ntString ntString)))))

(declare-var col1 String)
(declare-var col2 String)
(constraint (= (f "University of Pennsylvania" "Phialdelphia, PA, USA") "Phialdelphia, PA, USA"))
(constraint (= (f "UCLA" "Los Angeles, CA") "Los Angeles, CA, USA"))
(constraint (= (f "Cornell University" "Ithaca, New York, USA") "Ithaca, New York, USA"))
(constraint (= (f "Penn" "Philadelphia, PA, USA") "Philadelphia, PA, USA"))
(constraint (= (f "University of Maryland College Park" "College Park, MD") "College Park, MD, USA"))
(constraint (= (f "University of Michigan" "Ann Arbor, MI, USA") "Ann Arbor, MI, USA"))

(check-synth)
Solution:
(define-fun f ((col1 String) (col2 String)) String (ite (str.contains col2 "USA") col2 (str.++ (str.++ (str.++ col2 ",") " ") "USA")))

Question:
(set-logic SLIA)

(synth-fun f ((name String)) String
    ((Start String) (ntString String) (ntInt Int) (ntBool Bool))
    ((Start String (ntString))
    (ntString String (name " " "." "Dr." "D" "r" (str.++ ntString ntString) (str.replace ntString ntString ntString) (str.at ntString ntInt) (str.from_int ntInt) (str.substr ntString ntInt ntInt)))
    (ntInt Int (0 1 2 (+ ntInt ntInt) (- ntInt ntInt) (str.len ntString) (str.to_int ntString) (str.indexof ntString ntString ntInt)))
    (ntBool Bool (true false (str.prefixof ntString ntString) (str.suffixof ntString ntString) (str.contains ntString ntString)))))

(declare-var name String)
(constraint (= (f "Launa Withers") "Dr. Launa"))
(constraint (= (f "Launa Withers") "Dr. Launa"))
(constraint (= (f "Launa Withers") "Dr. Launa"))
(constraint (= (f "Lakenya Edison") "Dr. Lakenya"))
(constraint (= (f "Lakenya Edison") "Dr. Lakenya"))
(constraint (= (f "Lakenya Edison") "Dr. Lakenya"))
(constraint (= (f "Brendan Hage") "Dr. Brendan"))
(constraint (= (f "Brendan Hage") "Dr. Brendan"))
(constraint (= (f "Brendan Hage") "Dr. Brendan"))
(constraint (= (f "Bradford Lango") "Dr. Bradford"))
(constraint (= (f "Bradford Lango") "Dr. Bradford"))
(constraint (= (f "Bradford Lango") "Dr. Bradford"))
(constraint (= (f "Rudolf Akiyama") "Dr. Rudolf"))
(constraint (= (f "Rudolf Akiyama") "Dr. Rudolf"))
(constraint (= (f "Rudolf Akiyama") "Dr. Rudolf"))
(constraint (= (f "Lara Constable") "Dr. Lara"))
(constraint (= (f "Lara Constable") "Dr. Lara"))
(constraint (= (f "Lara Constable") "Dr. Lara"))
(constraint (= (f "Madelaine Ghoston") "Dr. Madelaine"))
(constraint (= (f "Madelaine Ghoston") "Dr. Madelaine"))
(constraint (= (f "Madelaine Ghoston") "Dr. Madelaine"))
(constraint (= (f "Salley Hornak") "Dr. Salley"))
(constraint (= (f "Salley Hornak") "Dr. Salley"))
(constraint (= (f "Salley Hornak") "Dr. Salley"))
(constraint (= (f "Micha Junkin") "Dr. Micha"))
(constraint (= (f "Micha Junkin") "Dr. Micha"))
(constraint (= (f "Micha Junkin") "Dr. Micha"))
(constraint (= (f "Teddy Bobo") "Dr. Teddy"))
(constraint (= (f "Teddy Bobo") "Dr. Teddy"))
(constraint (= (f "Teddy Bobo") "Dr. Teddy"))
(constraint (= (f "Coralee Scalia") "Dr. Coralee"))
(constraint (= (f "Coralee Scalia") "Dr. Coralee"))
(constraint (= (f "Coralee Scalia") "Dr. Coralee"))
(constraint (= (f "Jeff Quashie") "Dr. Jeff"))
(constraint (= (f "Jeff Quashie") "Dr. Jeff"))
(constraint (= (f "Jeff Quashie") "Dr. Jeff"))
(constraint (= (f "Vena Babiarz") "Dr. Vena"))
(constraint (= (f "Vena Babiarz") "Dr. Vena"))
(constraint (= (f "Vena Babiarz") "Dr. Vena"))
(constraint (= (f "Karrie Lain") "Dr. Karrie"))
(constraint (= (f "Karrie Lain") "Dr. Karrie"))
(constraint (= (f "Karrie Lain") "Dr. Karrie"))
(constraint (= (f "Tobias Dermody") "Dr. Tobias"))
(constraint (= (f "Tobias Dermody") "Dr. Tobias"))
(constraint (= (f "Tobias Dermody") "Dr. Tobias"))
(constraint (= (f "Celsa Hopkins") "Dr. Celsa"))
(constraint (= (f "Celsa Hopkins") "Dr. Celsa"))
(constraint (= (f "Celsa Hopkins") "Dr. Celsa"))
(constraint (= (f "Kimberley Halpern") "Dr. Kimberley"))
(constraint (= (f "Kimberley Halpern") "Dr. Kimberley"))
(constraint (= (f "Kimberley Halpern") "Dr. Kimberley"))
(constraint (= (f "Phillip Rowden") "Dr. Phillip"))
(constraint (= (f "Phillip Rowden") "Dr. Phillip"))
(constraint (= (f "Phillip Rowden") "Dr. Phillip"))
(constraint (= (f "Elias Neil") "Dr. Elias"))
(constraint (= (f "Elias Neil") "Dr. Elias"))
(constraint (= (f "Elias Neil") "Dr. Elias"))
(constraint (= (f "Lashanda Cortes") "Dr. Lashanda"))
(constraint (= (f "Lashanda Cortes") "Dr. Lashanda"))
(constraint (= (f "Lashanda Cortes") "Dr. Lashanda"))
(constraint (= (f "Mackenzie Spell") "Dr. Mackenzie"))
(constraint (= (f "Mackenzie Spell") "Dr. Mackenzie"))
(constraint (= (f "Mackenzie Spell") "Dr. Mackenzie"))
(constraint (= (f "Kathlyn Eccleston") "Dr. Kathlyn"))
(constraint (= (f "Kathlyn Eccleston") "Dr. Kathlyn"))
(constraint (= (f "Kathlyn Eccleston") "Dr. Kathlyn"))
(constraint (= (f "Georgina Brescia") "Dr. Georgina"))
(constraint (= (f "Georgina Brescia") "Dr. Georgina"))
(constraint (= (f "Georgina Brescia") "Dr. Georgina"))
(constraint (= (f "Beata Miah") "Dr. Beata"))
(constraint (= (f "Beata Miah") "Dr. Beata"))
(constraint (= (f "Beata Miah") "Dr. Beata"))
(constraint (= (f "Desiree Seamons") "Dr. Desiree"))
(constraint (= (f "Desiree Seamons") "Dr. Desiree"))
(constraint (= (f "Desiree Seamons") "Dr. Desiree"))
(constraint (= (f "Jeanice Soderstrom") "Dr. Jeanice"))
(constraint (= (f "Jeanice Soderstrom") "Dr. Jeanice"))
(constraint (= (f "Jeanice Soderstrom") "Dr. Jeanice"))
(constraint (= (f "Mariel Jurgens") "Dr. Mariel"))
(constraint (= (f "Mariel Jurgens") "Dr. Mariel"))
(constraint (= (f "Mariel Jurgens") "Dr. Mariel"))
(constraint (= (f "Alida Bogle") "Dr. Alida"))
(constraint (= (f "Alida Bogle") "Dr. Alida"))
(constraint (= (f "Alida Bogle") "Dr. Alida"))
(constraint (= (f "Jacqualine Olague") "Dr. Jacqualine"))
(constraint (= (f "Jacqualine Olague") "Dr. Jacqualine"))
(constraint (= (f "Jacqualine Olague") "Dr. Jacqualine"))
(constraint (= (f "Joaquin Clasen") "Dr. Joaquin"))
(constraint (= (f "Joaquin Clasen") "Dr. Joaquin"))
(constraint (= (f "Joaquin Clasen") "Dr. Joaquin"))
(constraint (= (f "Samuel Richert") "Dr. Samuel"))
(constraint (= (f "Samuel Richert") "Dr. Samuel"))
(constraint (= (f "Samuel Richert") "Dr. Samuel"))
(constraint (= (f "Malissa Marcus") "Dr. Malissa"))
(constraint (= (f "Malissa Marcus") "Dr. Malissa"))
(constraint (= (f "Malissa Marcus") "Dr. Malissa"))
(constraint (= (f "Alaina Partida") "Dr. Alaina"))
(constraint (= (f "Alaina Partida") "Dr. Alaina"))
(constraint (= (f "Alaina Partida") "Dr. Alaina"))
(constraint (= (f "Trinidad Mulloy") "Dr. Trinidad"))
(constraint (= (f "Trinidad Mulloy") "Dr. Trinidad"))
(constraint (= (f "Trinidad Mulloy") "Dr. Trinidad"))
(constraint (= (f "Carlene Garrard") "Dr. Carlene"))
(constraint (= (f "Carlene Garrard") "Dr. Carlene"))
(constraint (= (f "Carlene Garrard") "Dr. Carlene"))
(constraint (= (f "Melodi Chism") "Dr. Melodi"))
(constraint (= (f "Melodi Chism") "Dr. Melodi"))
(constraint (= (f "Melodi Chism") "Dr. Melodi"))
(constraint (= (f "Bess Chilcott") "Dr. Bess"))
(constraint (= (f "Bess Chilcott") "Dr. Bess"))
(constraint (= (f "Bess Chilcott") "Dr. Bess"))
(constraint (= (f "Chong Aylward") "Dr. Chong"))
(constraint (= (f "Chong Aylward") "Dr. Chong"))
(constraint (= (f "Chong Aylward") "Dr. Chong"))
(constraint (= (f "Jani Ramthun") "Dr. Jani"))
(constraint (= (f "Jani Ramthun") "Dr. Jani"))
(constraint (= (f "Jani Ramthun") "Dr. Jani"))
(constraint (= (f "Jacquiline Heintz") "Dr. Jacquiline"))
(constraint (= (f "Jacquiline Heintz") "Dr. Jacquiline"))
(constraint (= (f "Jacquiline Heintz") "Dr. Jacquiline"))
(constraint (= (f "Hayley Marquess") "Dr. Hayley"))
(constraint (= (f "Hayley Marquess") "Dr. Hayley"))
(constraint (= (f "Hayley Marquess") "Dr. Hayley"))
(constraint (= (f "Andria Spagnoli") "Dr. Andria"))
(constraint (= (f "Andria Spagnoli") "Dr. Andria"))
(constraint (= (f "Andria Spagnoli") "Dr. Andria"))
(constraint (= (f "Irwin Covelli") "Dr. Irwin"))
(constraint (= (f "Irwin Covelli") "Dr. Irwin"))
(constraint (= (f "Irwin Covelli") "Dr. Irwin"))
(constraint (= (f "Gertude Montiel") "Dr. Gertude"))
(constraint (= (f "Gertude Montiel") "Dr. Gertude"))
(constraint (= (f "Gertude Montiel") "Dr. Gertude"))
(constraint (= (f "Stefany Reily") "Dr. Stefany"))
(constraint (= (f "Stefany Reily") "Dr. Stefany"))
(constraint (= (f "Stefany Reily") "Dr. Stefany"))
(constraint (= (f "Rae Mcgaughey") "Dr. Rae"))
(constraint (= (f "Rae Mcgaughey") "Dr. Rae"))
(constraint (= (f "Rae Mcgaughey") "Dr. Rae"))
(constraint (= (f "Cruz Latimore") "Dr. Cruz"))
(constraint (= (f "Cruz Latimore") "Dr. Cruz"))
(constraint (= (f "Cruz Latimore") "Dr. Cruz"))
(constraint (= (f "Maryann Casler") "Dr. Maryann"))
(constraint (= (f "Maryann Casler") "Dr. Maryann"))
(constraint (= (f "Maryann Casler") "Dr. Maryann"))
(constraint (= (f "Annalisa Gregori") "Dr. Annalisa"))
(constraint (= (f "Annalisa Gregori") "Dr. Annalisa"))
(constraint (= (f "Annalisa Gregori") "Dr. Annalisa"))
(constraint (= (f "Jenee Pannell") "Dr. Jenee"))
(constraint (= (f "Jenee Pannell") "Dr. Jenee"))
(constraint (= (f "Jenee Pannell") "Dr. Jenee"))

(check-synth)
Solution:
(define-fun f ((name String)) String (str.++ (str.++ "Dr." " ") (str.substr name 0 (str.indexof name " " 0))))

Question:
(set-logic SLIA)

(synth-fun f ((name String)) String
    ((Start String) (ntString String) (ntInt Int) (ntBool Bool))
    ((Start String (ntString))
    (ntString String (name " " (str.++ ntString ntString) (str.replace ntString ntString ntString) (str.at ntString ntInt) (str.from_int ntInt) (str.substr ntString ntInt ntInt)))
    (ntInt Int (0 1 2 (+ ntInt ntInt) (- ntInt ntInt) (str.len ntString) (str.to_int ntString) (str.indexof ntString ntString ntInt)))
    (ntBool Bool (true false (str.prefixof ntString ntString) (str.suffixof ntString ntString) (str.contains ntString ntString)))))

(declare-var name String)
(constraint (= (f "Nancy FreeHafer") "Nancy"))
(constraint (= (f "Andrew Cencici") "Andrew"))
(constraint (= (f "Jan Kotas") "Jan"))
(constraint (= (f "Mariya Sergienko") "Mariya"))
(constraint (= (f "Launa Withers") "Launa"))
(constraint (= (f "Launa Withers") "Launa"))
(constraint (= (f "Launa Withers") "Launa"))
(constraint (= (f "Lakenya Edison") "Lakenya"))
(constraint (= (f "Lakenya Edison") "Lakenya"))
(constraint (= (f "Lakenya Edison") "Lakenya"))
(constraint (= (f "Brendan Hage") "Brendan"))
(constraint (= (f "Brendan Hage") "Brendan"))
(constraint (= (f "Brendan Hage") "Brendan"))
(constraint (= (f "Bradford Lango") "Bradford"))
(constraint (= (f "Bradford Lango") "Bradford"))
(constraint (= (f "Bradford Lango") "Bradford"))
(constraint (= (f "Rudolf Akiyama") "Rudolf"))
(constraint (= (f "Rudolf Akiyama") "Rudolf"))
(constraint (= (f "Rudolf Akiyama") "Rudolf"))
(constraint (= (f "Lara Constable") "Lara"))
(constraint (= (f "Lara Constable") "Lara"))
(constraint (= (f "Lara Constable") "Lara"))
(constraint (= (f "Madelaine Ghoston") "Madelaine"))
(constraint (= (f "Madelaine Ghoston") "Madelaine"))
(constraint (= (f "Madelaine Ghoston") "Madelaine"))
(constraint (= (f "Salley Hornak") "Salley"))
(constraint (= (f "Salley Hornak") "Salley"))
(constraint (= (f "Salley Hornak") "Salley"))
(constraint (= (f "Micha Junkin") "Micha"))
(constraint (= (f "Micha Junkin") "Micha"))
(constraint (= (f "Micha Junkin") "Micha"))
(constraint (= (f "Teddy Bobo") "Teddy"))
(constraint (= (f "Teddy Bobo") "Teddy"))
(constraint (= (f "Teddy Bobo") "Teddy"))
(constraint (= (f "Coralee Scalia") "Coralee"))
(constraint (= (f "Coralee Scalia") "Coralee"))
(constraint (= (f "Coralee Scalia") "Coralee"))
(constraint (= (f "Jeff Quashie") "Jeff"))
(constraint (= (f "Jeff Quashie") "Jeff"))
(constraint (= (f "Jeff Quashie") "Jeff"))
(constraint (= (f "Vena Babiarz") "Vena"))
(constraint (= (f "Vena Babiarz") "Vena"))
(constraint (= (f "Vena Babiarz") "Vena"))
(constraint (= (f "Karrie Lain") "Karrie"))
(constraint (= (f "Karrie Lain") "Karrie"))
(constraint (= (f "Karrie Lain") "Karrie"))
(constraint (= (f "Tobias Dermody") "Tobias"))
(constraint (= (f "Tobias Dermody") "Tobias"))
(constraint (= (f "Tobias Dermody") "Tobias"))
(constraint (= (f "Celsa Hopkins") "Celsa"))
(constraint (= (f "Celsa Hopkins") "Celsa"))
(constraint (= (f "Celsa Hopkins") "Celsa"))
(constraint (= (f "Kimberley Halpern") "Kimberley"))
(constraint (= (f "Kimberley Halpern") "Kimberley"))
(constraint (= (f "Kimberley Halpern") "Kimberley"))
(constraint (= (f "Phillip Rowden") "Phillip"))
(constraint (= (f "Phillip Rowden") "Phillip"))
(constraint (= (f "Phillip Rowden") "Phillip"))
(constraint (= (f "Elias Neil") "Elias"))
(constraint (= (f "Elias Neil") "Elias"))
(constraint (= (f "Elias Neil") "Elias"))
(constraint (= (f "Lashanda Cortes") "Lashanda"))
(constraint (= (f "Lashanda Cortes") "Lashanda"))
(constraint (= (f "Lashanda Cortes") "Lashanda"))
(constraint (= (f "Mackenzie Spell") "Mackenzie"))
(constraint (= (f "Mackenzie Spell") "Mackenzie"))
(constraint (= (f "Mackenzie Spell") "Mackenzie"))
(constraint (= (f "Kathlyn Eccleston") "Kathlyn"))
(constraint (= (f "Kathlyn Eccleston") "Kathlyn"))
(constraint (= (f "Kathlyn Eccleston") "Kathlyn"))
(constraint (= (f "Georgina Brescia") "Georgina"))
(constraint (= (f "Georgina Brescia") "Georgina"))
(constraint (= (f "Georgina Brescia") "Georgina"))
(constraint (= (f "Beata Miah") "Beata"))
(constraint (= (f "Beata Miah") "Beata"))
(constraint (= (f "Beata Miah") "Beata"))
(constraint (= (f "Desiree Seamons") "Desiree"))
(constraint (= (f "Desiree Seamons") "Desiree"))
(constraint (= (f "Desiree Seamons") "Desiree"))
(constraint (= (f "Jeanice Soderstrom") "Jeanice"))
(constraint (= (f "Jeanice Soderstrom") "Jeanice"))
(constraint (= (f "Jeanice Soderstrom") "Jeanice"))
(constraint (= (f "Mariel Jurgens") "Mariel"))
(constraint (= (f "Mariel Jurgens") "Mariel"))
(constraint (= (f "Mariel Jurgens") "Mariel"))
(constraint (= (f "Alida Bogle") "Alida"))
(constraint (= (f "Alida Bogle") "Alida"))
(constraint (= (f "Alida Bogle") "Alida"))
(constraint (= (f "Jacqualine Olague") "Jacqualine"))
(constraint (= (f "Jacqualine Olague") "Jacqualine"))
(constraint (= (f "Jacqualine Olague") "Jacqualine"))
(constraint (= (f "Joaquin Clasen") "Joaquin"))
(constraint (= (f "Joaquin Clasen") "Joaquin"))
(constraint (= (f "Joaquin Clasen") "Joaquin"))
(constraint (= (f "Samuel Richert") "Samuel"))
(constraint (= (f "Samuel Richert") "Samuel"))
(constraint (= (f "Samuel Richert") "Samuel"))
(constraint (= (f "Malissa Marcus") "Malissa"))
(constraint (= (f "Malissa Marcus") "Malissa"))
(constraint (= (f "Malissa Marcus") "Malissa"))
(constraint (= (f "Alaina Partida") "Alaina"))
(constraint (= (f "Alaina Partida") "Alaina"))
(constraint (= (f "Alaina Partida") "Alaina"))
(constraint (= (f "Trinidad Mulloy") "Trinidad"))
(constraint (= (f "Trinidad Mulloy") "Trinidad"))
(constraint (= (f "Trinidad Mulloy") "Trinidad"))
(constraint (= (f "Carlene Garrard") "Carlene"))
(constraint (= (f "Carlene Garrard") "Carlene"))
(constraint (= (f "Carlene Garrard") "Carlene"))
(constraint (= (f "Melodi Chism") "Melodi"))
(constraint (= (f "Melodi Chism") "Melodi"))
(constraint (= (f "Melodi Chism") "Melodi"))
(constraint (= (f "Bess Chilcott") "Bess"))
(constraint (= (f "Bess Chilcott") "Bess"))
(constraint (= (f "Bess Chilcott") "Bess"))
(constraint (= (f "Chong Aylward") "Chong"))
(constraint (= (f "Chong Aylward") "Chong"))
(constraint (= (f "Chong Aylward") "Chong"))
(constraint (= (f "Jani Ramthun") "Jani"))
(constraint (= (f "Jani Ramthun") "Jani"))
(constraint (= (f "Jani Ramthun") "Jani"))
(constraint (= (f "Jacquiline Heintz") "Jacquiline"))
(constraint (= (f "Jacquiline Heintz") "Jacquiline"))
(constraint (= (f "Jacquiline Heintz") "Jacquiline"))
(constraint (= (f "Hayley Marquess") "Hayley"))
(constraint (= (f "Hayley Marquess") "Hayley"))
(constraint (= (f "Hayley Marquess") "Hayley"))
(constraint (= (f "Andria Spagnoli") "Andria"))
(constraint (= (f "Andria Spagnoli") "Andria"))
(constraint (= (f "Andria Spagnoli") "Andria"))
(constraint (= (f "Irwin Covelli") "Irwin"))
(constraint (= (f "Irwin Covelli") "Irwin"))
(constraint (= (f "Irwin Covelli") "Irwin"))
(constraint (= (f "Gertude Montiel") "Gertude"))
(constraint (= (f "Gertude Montiel") "Gertude"))
(constraint (= (f "Gertude Montiel") "Gertude"))
(constraint (= (f "Stefany Reily") "Stefany"))
(constraint (= (f "Stefany Reily") "Stefany"))
(constraint (= (f "Stefany Reily") "Stefany"))
(constraint (= (f "Rae Mcgaughey") "Rae"))
(constraint (= (f "Rae Mcgaughey") "Rae"))
(constraint (= (f "Rae Mcgaughey") "Rae"))
(constraint (= (f "Cruz Latimore") "Cruz"))
(constraint (= (f "Cruz Latimore") "Cruz"))
(constraint (= (f "Cruz Latimore") "Cruz"))
(constraint (= (f "Maryann Casler") "Maryann"))
(constraint (= (f "Maryann Casler") "Maryann"))
(constraint (= (f "Maryann Casler") "Maryann"))
(constraint (= (f "Annalisa Gregori") "Annalisa"))
(constraint (= (f "Annalisa Gregori") "Annalisa"))
(constraint (= (f "Annalisa Gregori") "Annalisa"))
(constraint (= (f "Jenee Pannell") "Jenee"))
(constraint (= (f "Jenee Pannell") "Jenee"))
(constraint (= (f "Jenee Pannell") "Jenee"))
(constraint (= (f "Launa Withers") "Launa"))
(constraint (= (f "Lakenya Edison") "Lakenya"))
(constraint (= (f "Brendan Hage") "Brendan"))
(constraint (= (f "Bradford Lango") "Bradford"))
(constraint (= (f "Rudolf Akiyama") "Rudolf"))
(constraint (= (f "Lara Constable") "Lara"))
(constraint (= (f "Madelaine Ghoston") "Madelaine"))
(constraint (= (f "Salley Hornak") "Salley"))
(constraint (= (f "Micha Junkin") "Micha"))
(constraint (= (f "Teddy Bobo") "Teddy"))
(constraint (= (f "Coralee Scalia") "Coralee"))
(constraint (= (f "Jeff Quashie") "Jeff"))
(constraint (= (f "Vena Babiarz") "Vena"))
(constraint (= (f "Karrie Lain") "Karrie"))
(constraint (= (f "Tobias Dermody") "Tobias"))
(constraint (= (f "Celsa Hopkins") "Celsa"))
(constraint (= (f "Kimberley Halpern") "Kimberley"))
(constraint (= (f "Phillip Rowden") "Phillip"))
(constraint (= (f "Elias Neil") "Elias"))
(constraint (= (f "Lashanda Cortes") "Lashanda"))
(constraint (= (f "Mackenzie Spell") "Mackenzie"))
(constraint (= (f "Kathlyn Eccleston") "Kathlyn"))
(constraint (= (f "Georgina Brescia") "Georgina"))
(constraint (= (f "Beata Miah") "Beata"))
(constraint (= (f "Desiree Seamons") "Desiree"))
(constraint (= (f "Jeanice Soderstrom") "Jeanice"))
(constraint (= (f "Mariel Jurgens") "Mariel"))
(constraint (= (f "Alida Bogle") "Alida"))
(constraint (= (f "Jacqualine Olague") "Jacqualine"))
(constraint (= (f "Joaquin Clasen") "Joaquin"))
(constraint (= (f "Samuel Richert") "Samuel"))
(constraint (= (f "Malissa Marcus") "Malissa"))
(constraint (= (f "Alaina Partida") "Alaina"))
(constraint (= (f "Trinidad Mulloy") "Trinidad"))
(constraint (= (f "Carlene Garrard") "Carlene"))
(constraint (= (f "Melodi Chism") "Melodi"))
(constraint (= (f "Bess Chilcott") "Bess"))
(constraint (= (f "Chong Aylward") "Chong"))
(constraint (= (f "Jani Ramthun") "Jani"))
(constraint (= (f "Jacquiline Heintz") "Jacquiline"))
(constraint (= (f "Hayley Marquess") "Hayley"))
(constraint (= (f "Andria Spagnoli") "Andria"))
(constraint (= (f "Irwin Covelli") "Irwin"))
(constraint (= (f "Gertude Montiel") "Gertude"))
(constraint (= (f "Stefany Reily") "Stefany"))
(constraint (= (f "Rae Mcgaughey") "Rae"))
(constraint (= (f "Cruz Latimore") "Cruz"))
(constraint (= (f "Maryann Casler") "Maryann"))
(constraint (= (f "Annalisa Gregori") "Annalisa"))
(constraint (= (f "Jenee Pannell") "Jenee"))

(check-synth)
Solution:
