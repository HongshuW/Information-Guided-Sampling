You are an expert in program synthesis. You are tasked with solving a Syntax-Guided Synthesis (SyGuS) problem. Your goal is to output a function that should produce outputs that satisfy a series of constraints when given specific inputs.

Question:
(set-logic SLIA)

(synth-fun f ((col1 String) (col2 String)) String)

(declare-var col1 String)
(declare-var col2 String)
(constraint (= (f "University of Pennsylvania" "Phialdelphia, PA, USA") "Phialdelphia, PA, USA"))
(constraint (= (f "UCLA" "Los Angeles, CA") "Los Angeles, CA, USA"))
(constraint (= (f "Cornell University" "Ithaca, New York, USA") "Ithaca, NY, USA"))
(constraint (= (f "Penn" "Philadelphia, PA, USA") "Philadelphia, PA, USA"))
(constraint (= (f "University of Maryland College Park" "College Park, MD") "College Park, MD, USA"))
(constraint (= (f "University of Michigan" "Ann Arbor, MI, USA") "Ann Arbor, MI, USA"))
(constraint (= (f "Columbia University" "New York, NY, USA") "New York, NY, USA"))
(constraint (= (f "NYU" "New York, New York, USA") "New York, NY, USA"))

(check-synth)
Solution:
(define-fun f ((col1 String) (col2 String)) String (let ((_let_1 (str.++ col2 ","))) (ite (str.prefixof "New York" col2) (str.++ "New York" (str.++ "," (str.++ " " (str.++ "NY" (str.++ "," (str.++ " " "USA")))))) (ite (str.suffixof "USA" col2) (str.replace col2 "New York" "NY") (str.++ (str.++ (ite (str.suffixof "CA" col2) _let_1 _let_1) " ") "USA")))))

Question:
(set-logic SLIA)

(synth-fun f ((name String)) String)

(declare-var name String)
(constraint (= (f "938-242-504") "504"))
(constraint (= (f "308-916-545") "545"))
(constraint (= (f "623-599-749") "749"))
(constraint (= (f "981-424-843") "843"))
(constraint (= (f "118-980-214") "214"))
(constraint (= (f "244-655-094") "094"))

(check-synth)
Solution:
(define-fun f ((name String)) String (str.++ (str.at name (+ 3 5)) (str.++ (str.at name (+ 4 5)) (str.at name (+ 5 5)))))

Question:
(set-logic SLIA)

(synth-fun f ((name String)) String)

(declare-var name String)
(constraint (= (f "Nancy FreeHafer") "FreeHafer"))
(constraint (= (f "Andrew Cencici") "Cencici"))
(constraint (= (f "Jan Kotas") "Kotas"))
(constraint (= (f "Mariya Sergienko") "Sergienko"))

(check-synth)
Solution:
(define-fun f ((name String)) String (str.substr name (+ 1 (str.indexof name " " 0)) (str.len name)))

Question:
(set-logic SLIA)

(synth-fun f ((name String)) String)

(declare-var name String)
(constraint (= (f "Nancy FreeHafer") "FreeHafer"))
(constraint (= (f "Andrew Cencici") "Cencici"))
(constraint (= (f "Jan Kotas") "Kotas"))
(constraint (= (f "Mariya Sergienko") "Sergienko"))
(constraint (= (f "Launa Withers") "Withers"))
(constraint (= (f "Launa Withers") "Withers"))
(constraint (= (f "Launa Withers") "Withers"))
(constraint (= (f "Lakenya Edison") "Edison"))
(constraint (= (f "Lakenya Edison") "Edison"))
(constraint (= (f "Lakenya Edison") "Edison"))
(constraint (= (f "Brendan Hage") "Hage"))
(constraint (= (f "Brendan Hage") "Hage"))
(constraint (= (f "Brendan Hage") "Hage"))
(constraint (= (f "Bradford Lango") "Lango"))
(constraint (= (f "Bradford Lango") "Lango"))
(constraint (= (f "Bradford Lango") "Lango"))
(constraint (= (f "Rudolf Akiyama") "Akiyama"))
(constraint (= (f "Rudolf Akiyama") "Akiyama"))
(constraint (= (f "Rudolf Akiyama") "Akiyama"))
(constraint (= (f "Lara Constable") "Constable"))
(constraint (= (f "Lara Constable") "Constable"))
(constraint (= (f "Lara Constable") "Constable"))
(constraint (= (f "Madelaine Ghoston") "Ghoston"))
(constraint (= (f "Madelaine Ghoston") "Ghoston"))
(constraint (= (f "Madelaine Ghoston") "Ghoston"))
(constraint (= (f "Salley Hornak") "Hornak"))
(constraint (= (f "Salley Hornak") "Hornak"))
(constraint (= (f "Salley Hornak") "Hornak"))
(constraint (= (f "Micha Junkin") "Junkin"))
(constraint (= (f "Micha Junkin") "Junkin"))
(constraint (= (f "Micha Junkin") "Junkin"))
(constraint (= (f "Teddy Bobo") "Bobo"))
(constraint (= (f "Teddy Bobo") "Bobo"))
(constraint (= (f "Teddy Bobo") "Bobo"))
(constraint (= (f "Coralee Scalia") "Scalia"))
(constraint (= (f "Coralee Scalia") "Scalia"))
(constraint (= (f "Coralee Scalia") "Scalia"))
(constraint (= (f "Jeff Quashie") "Quashie"))
(constraint (= (f "Jeff Quashie") "Quashie"))
(constraint (= (f "Jeff Quashie") "Quashie"))
(constraint (= (f "Vena Babiarz") "Babiarz"))
(constraint (= (f "Vena Babiarz") "Babiarz"))
(constraint (= (f "Vena Babiarz") "Babiarz"))
(constraint (= (f "Karrie Lain") "Lain"))
(constraint (= (f "Karrie Lain") "Lain"))
(constraint (= (f "Karrie Lain") "Lain"))
(constraint (= (f "Tobias Dermody") "Dermody"))
(constraint (= (f "Tobias Dermody") "Dermody"))
(constraint (= (f "Tobias Dermody") "Dermody"))
(constraint (= (f "Celsa Hopkins") "Hopkins"))
(constraint (= (f "Celsa Hopkins") "Hopkins"))
(constraint (= (f "Celsa Hopkins") "Hopkins"))
(constraint (= (f "Kimberley Halpern") "Halpern"))
(constraint (= (f "Kimberley Halpern") "Halpern"))
(constraint (= (f "Kimberley Halpern") "Halpern"))
(constraint (= (f "Phillip Rowden") "Rowden"))
(constraint (= (f "Phillip Rowden") "Rowden"))
(constraint (= (f "Phillip Rowden") "Rowden"))
(constraint (= (f "Elias Neil") "Neil"))
(constraint (= (f "Elias Neil") "Neil"))
(constraint (= (f "Elias Neil") "Neil"))
(constraint (= (f "Lashanda Cortes") "Cortes"))
(constraint (= (f "Lashanda Cortes") "Cortes"))
(constraint (= (f "Lashanda Cortes") "Cortes"))
(constraint (= (f "Mackenzie Spell") "Spell"))
(constraint (= (f "Mackenzie Spell") "Spell"))
(constraint (= (f "Mackenzie Spell") "Spell"))
(constraint (= (f "Kathlyn Eccleston") "Eccleston"))
(constraint (= (f "Kathlyn Eccleston") "Eccleston"))
(constraint (= (f "Kathlyn Eccleston") "Eccleston"))
(constraint (= (f "Georgina Brescia") "Brescia"))
(constraint (= (f "Georgina Brescia") "Brescia"))
(constraint (= (f "Georgina Brescia") "Brescia"))
(constraint (= (f "Beata Miah") "Miah"))
(constraint (= (f "Beata Miah") "Miah"))
(constraint (= (f "Beata Miah") "Miah"))
(constraint (= (f "Desiree Seamons") "Seamons"))
(constraint (= (f "Desiree Seamons") "Seamons"))
(constraint (= (f "Desiree Seamons") "Seamons"))
(constraint (= (f "Jeanice Soderstrom") "Soderstrom"))
(constraint (= (f "Jeanice Soderstrom") "Soderstrom"))
(constraint (= (f "Jeanice Soderstrom") "Soderstrom"))
(constraint (= (f "Mariel Jurgens") "Jurgens"))
(constraint (= (f "Mariel Jurgens") "Jurgens"))
(constraint (= (f "Mariel Jurgens") "Jurgens"))
(constraint (= (f "Alida Bogle") "Bogle"))
(constraint (= (f "Alida Bogle") "Bogle"))
(constraint (= (f "Alida Bogle") "Bogle"))
(constraint (= (f "Jacqualine Olague") "Olague"))
(constraint (= (f "Jacqualine Olague") "Olague"))
(constraint (= (f "Jacqualine Olague") "Olague"))
(constraint (= (f "Joaquin Clasen") "Clasen"))
(constraint (= (f "Joaquin Clasen") "Clasen"))
(constraint (= (f "Joaquin Clasen") "Clasen"))
(constraint (= (f "Samuel Richert") "Richert"))
(constraint (= (f "Samuel Richert") "Richert"))
(constraint (= (f "Samuel Richert") "Richert"))
(constraint (= (f "Malissa Marcus") "Marcus"))
(constraint (= (f "Malissa Marcus") "Marcus"))
(constraint (= (f "Malissa Marcus") "Marcus"))
(constraint (= (f "Alaina Partida") "Partida"))
(constraint (= (f "Alaina Partida") "Partida"))
(constraint (= (f "Alaina Partida") "Partida"))
(constraint (= (f "Trinidad Mulloy") "Mulloy"))
(constraint (= (f "Trinidad Mulloy") "Mulloy"))
(constraint (= (f "Trinidad Mulloy") "Mulloy"))
(constraint (= (f "Carlene Garrard") "Garrard"))
(constraint (= (f "Carlene Garrard") "Garrard"))
(constraint (= (f "Carlene Garrard") "Garrard"))
(constraint (= (f "Melodi Chism") "Chism"))
(constraint (= (f "Melodi Chism") "Chism"))
(constraint (= (f "Melodi Chism") "Chism"))
(constraint (= (f "Bess Chilcott") "Chilcott"))
(constraint (= (f "Bess Chilcott") "Chilcott"))
(constraint (= (f "Bess Chilcott") "Chilcott"))
(constraint (= (f "Chong Aylward") "Aylward"))
(constraint (= (f "Chong Aylward") "Aylward"))
(constraint (= (f "Chong Aylward") "Aylward"))
(constraint (= (f "Jani Ramthun") "Ramthun"))
(constraint (= (f "Jani Ramthun") "Ramthun"))
(constraint (= (f "Jani Ramthun") "Ramthun"))
(constraint (= (f "Jacquiline Heintz") "Heintz"))
(constraint (= (f "Jacquiline Heintz") "Heintz"))
(constraint (= (f "Jacquiline Heintz") "Heintz"))
(constraint (= (f "Hayley Marquess") "Marquess"))
(constraint (= (f "Hayley Marquess") "Marquess"))
(constraint (= (f "Hayley Marquess") "Marquess"))
(constraint (= (f "Andria Spagnoli") "Spagnoli"))
(constraint (= (f "Andria Spagnoli") "Spagnoli"))
(constraint (= (f "Andria Spagnoli") "Spagnoli"))
(constraint (= (f "Irwin Covelli") "Covelli"))
(constraint (= (f "Irwin Covelli") "Covelli"))
(constraint (= (f "Irwin Covelli") "Covelli"))
(constraint (= (f "Gertude Montiel") "Montiel"))
(constraint (= (f "Gertude Montiel") "Montiel"))
(constraint (= (f "Gertude Montiel") "Montiel"))
(constraint (= (f "Stefany Reily") "Reily"))
(constraint (= (f "Stefany Reily") "Reily"))
(constraint (= (f "Stefany Reily") "Reily"))
(constraint (= (f "Rae Mcgaughey") "Mcgaughey"))
(constraint (= (f "Rae Mcgaughey") "Mcgaughey"))
(constraint (= (f "Rae Mcgaughey") "Mcgaughey"))
(constraint (= (f "Cruz Latimore") "Latimore"))
(constraint (= (f "Cruz Latimore") "Latimore"))
(constraint (= (f "Cruz Latimore") "Latimore"))
(constraint (= (f "Maryann Casler") "Casler"))
(constraint (= (f "Maryann Casler") "Casler"))
(constraint (= (f "Maryann Casler") "Casler"))
(constraint (= (f "Annalisa Gregori") "Gregori"))
(constraint (= (f "Annalisa Gregori") "Gregori"))
(constraint (= (f "Annalisa Gregori") "Gregori"))
(constraint (= (f "Jenee Pannell") "Pannell"))
(constraint (= (f "Jenee Pannell") "Pannell"))
(constraint (= (f "Jenee Pannell") "Pannell"))
(constraint (= (f "Launa Withers") "Withers"))
(constraint (= (f "Lakenya Edison") "Edison"))
(constraint (= (f "Brendan Hage") "Hage"))
(constraint (= (f "Bradford Lango") "Lango"))
(constraint (= (f "Rudolf Akiyama") "Akiyama"))
(constraint (= (f "Lara Constable") "Constable"))
(constraint (= (f "Madelaine Ghoston") "Ghoston"))
(constraint (= (f "Salley Hornak") "Hornak"))
(constraint (= (f "Micha Junkin") "Junkin"))
(constraint (= (f "Teddy Bobo") "Bobo"))
(constraint (= (f "Coralee Scalia") "Scalia"))
(constraint (= (f "Jeff Quashie") "Quashie"))
(constraint (= (f "Vena Babiarz") "Babiarz"))
(constraint (= (f "Karrie Lain") "Lain"))
(constraint (= (f "Tobias Dermody") "Dermody"))
(constraint (= (f "Celsa Hopkins") "Hopkins"))
(constraint (= (f "Kimberley Halpern") "Halpern"))
(constraint (= (f "Phillip Rowden") "Rowden"))
(constraint (= (f "Elias Neil") "Neil"))
(constraint (= (f "Lashanda Cortes") "Cortes"))
(constraint (= (f "Mackenzie Spell") "Spell"))
(constraint (= (f "Kathlyn Eccleston") "Eccleston"))
(constraint (= (f "Georgina Brescia") "Brescia"))
(constraint (= (f "Beata Miah") "Miah"))
(constraint (= (f "Desiree Seamons") "Seamons"))
(constraint (= (f "Jeanice Soderstrom") "Soderstrom"))
(constraint (= (f "Mariel Jurgens") "Jurgens"))
(constraint (= (f "Alida Bogle") "Bogle"))
(constraint (= (f "Jacqualine Olague") "Olague"))
(constraint (= (f "Joaquin Clasen") "Clasen"))
(constraint (= (f "Samuel Richert") "Richert"))
(constraint (= (f "Malissa Marcus") "Marcus"))
(constraint (= (f "Alaina Partida") "Partida"))
(constraint (= (f "Trinidad Mulloy") "Mulloy"))
(constraint (= (f "Carlene Garrard") "Garrard"))
(constraint (= (f "Melodi Chism") "Chism"))
(constraint (= (f "Bess Chilcott") "Chilcott"))
(constraint (= (f "Chong Aylward") "Aylward"))
(constraint (= (f "Jani Ramthun") "Ramthun"))
(constraint (= (f "Jacquiline Heintz") "Heintz"))
(constraint (= (f "Hayley Marquess") "Marquess"))
(constraint (= (f "Andria Spagnoli") "Spagnoli"))
(constraint (= (f "Irwin Covelli") "Covelli"))
(constraint (= (f "Gertude Montiel") "Montiel"))
(constraint (= (f "Stefany Reily") "Reily"))
(constraint (= (f "Rae Mcgaughey") "Mcgaughey"))
(constraint (= (f "Cruz Latimore") "Latimore"))
(constraint (= (f "Maryann Casler") "Casler"))
(constraint (= (f "Annalisa Gregori") "Gregori"))
(constraint (= (f "Jenee Pannell") "Pannell"))

(check-synth)
Solution:
